import asyncio
import logging
from typing import Dict, Any
from langchain_openai import ChatOpenAI

from src.agents.DeEscalationAgent.deescalation_agent import DeEscalationAgent
from src.agents.IntentClassIfierAgent.intent_classifier_agent import IntentClassifierAgent
from src.agents.ToxicDetectorAgent.toxic_detector_agent import ToxicityDetectorAgent
from src.agents.KnowledgeBaseManager.knowledge_retrieval_agent import KnowledgeRetrievalAgent
from src.agents.ResponseGeneratorAgent.response_generator_agent import ResponseGeneratorAgent
from src.agents.KnowledgeBaseManager.knowledge_base_manager import KnowledgeBaseManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TechSupportSystem:
    """–ü—Ä–æ—Ç–æ—Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""

    def __init__(self):
        self.llm = None
        self.toxicity_detector = None
        self.deescalation_agent = None
        self.intent_classifier = None
        self.knowledge_base_manager = None
        self.knowledge_retrieval_agent = None
        self.response_generator = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.llm = ChatOpenAI(
                model="deepseek/deepseek-v3.2-exp-alt",
                temperature=0.3,
                api_key="sk-or-vv-264b7ac948300c5bd342c7fe83339dd3b38a269668c36e4fbad3fca8ee859345",
                base_url="https://api.vsegpt.ru/v1",
                max_tokens=1000,
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
            self.toxicity_detector = ToxicityDetectorAgent(
                toxicity_threshold=0.7,
                high_toxicity_threshold=0.9
            )

            self.deescalation_agent = DeEscalationAgent(llm=self.llm)
            self.intent_classifier = IntentClassifierAgent(llm=self.llm)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            self.knowledge_base_manager = KnowledgeBaseManager(
                data_path="data/data.md",
                vector_store_path="vector_store"
            )

            await self.knowledge_base_manager.load_or_create_knowledge_base()

            self.knowledge_retrieval_agent = KnowledgeRetrievalAgent(
                knowledge_base_manager=self.knowledge_base_manager,
                similarity_threshold=0.3
            )

            self.response_generator = ResponseGeneratorAgent(llm=self.llm)

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False

    async def process_user_request(self, user_message: str, user_id: str = "test_user") -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä

        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        """
        results = {
            "user_message": user_message,
            "user_id": user_id,
            "processing_steps": {}
        }

        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏...")
            toxicity_result = await self.toxicity_detector.detect_toxicity(user_message)
            results["processing_steps"]["toxicity_check"] = {
                "status": toxicity_result.status.value,
                "score": toxicity_result.score,
                "reasons": toxicity_result.reasons
            }

            # –®–∞–≥ 2: –î–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if toxicity_result.status.value == "toxic":
                logger.info("üîÑ –î–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                deescalated_response = await self.deescalation_agent.deescalate_conversation(user_message)
                results["processing_steps"]["deescalation"] = {
                    "applied": True,
                    "deescalated_message": deescalated_response
                }
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
                results["final_response"] = deescalated_response
                results["processing_complete"] = True
                return results

            results["processing_steps"]["deescalation"] = {"applied": False}

            # –®–∞–≥ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            logger.info("üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è...")
            intent_result = await self.intent_classifier.get_classification(user_message)
            results["processing_steps"]["intent_classification"] = {
                "intent": intent_result.classification,
                "confidence": intent_result.confidence,
                "message": intent_result.message
            }

            # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            logger.info("üìö –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
            knowledge_context = {
                'k': 5,
                'filters': {'intent': intent_result.classification}
            }

            knowledge_result = await self.knowledge_retrieval_agent.retrieve_knowledge(
                query=user_message,
                context=knowledge_context
            )

            results["processing_steps"]["knowledge_retrieval"] = {
                "documents_found": len(knowledge_result.documents),
                "confidence": knowledge_result.confidence,
                "suggested_actions": knowledge_result.suggested_actions
            }

            # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
            execution_results = {
                'intent': {
                    'classification': intent_result.classification,
                    'confidence': intent_result.confidence
                },
                'knowledge': {
                    'documents': [doc.dict() for doc in knowledge_result.documents],
                    'answer': knowledge_result.answer,
                    'confidence': knowledge_result.confidence
                }
            }

            context = {
                'user_query': user_message,
                'user_context': {
                    'user_id': user_id,
                    'user_role': 'user'
                },
                'conversation_history': [],
                'system_capabilities': ['knowledge_retrieval', 'intent_classification']
            }

            final_response = await self.response_generator.generate_response(
                execution_results=execution_results,
                context=context
            )

            results["final_response"] = final_response
            results["processing_complete"] = True

            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            results["error"] = str(e)
            results["processing_complete"] = False
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            results["final_response"] = (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
            )

        return results

    def print_processing_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û–ë –û–ë–†–ê–ë–û–¢–ö–ï –ó–ê–ü–†–û–°–ê")
        print("=" * 60)

        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {results['user_id']}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {results['user_message']}")
        print()

        steps = results["processing_steps"]

        # –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
        toxicity = steps.get("toxicity_check", {})
        print(f"üîç –¢–û–ö–°–ò–ß–ù–û–°–¢–¨: {toxicity.get('status', 'N/A')}")
        print(f"   –û—Ü–µ–Ω–∫–∞: {toxicity.get('score', 0):.3f}")
        if toxicity.get('reasons'):
            print(f"   –ü—Ä–∏—á–∏–Ω—ã: {', '.join(toxicity['reasons'][:2])}")

        # –î–µ—ç—Å–∫–∞–ª–∞—Ü–∏—è
        deescalation = steps.get("deescalation", {})
        if deescalation.get('applied'):
            print(f"üîÑ –î–ï–≠–°–ö–ê–õ–ê–¶–ò–Ø: –ü–†–ò–ú–ï–ù–ï–ù–ê")
            print(f"   –û—Ç–≤–µ—Ç: {deescalation.get('deescalated_message', 'N/A')}")

        # –ù–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = steps.get("intent_classification", {})
        print(f"üéØ –ù–ê–ú–ï–†–ï–ù–ò–ï: {intent.get('intent', 'N/A')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent.get('confidence', 0):.2f}")

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        knowledge = steps.get("knowledge_retrieval", {})
        print(f"üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô: {knowledge.get('documents_found', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {knowledge.get('confidence', 0):.2f}")

        print("\n" + "ü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢:")
        print("-" * 40)
        print(results["final_response"])
        print("=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    system = TechSupportSystem()
    success = await system.initialize()

    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        return

    print("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞!")
    print("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    print("-" * 50)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_messages = [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "–í—ã –≤—Å–µ –∏–¥–∏–æ—Ç—ã! –ü–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∞–¥–∞–µ—Ç?!",
        "–ö–∞–∫ –º–Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?",
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –ø—Ä–æ—Å—Ç–æ —à—É—Ç–∫–∞! –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–º–æ—á—å!",
        "–ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö",
        "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ –¥–µ–ª–∞—Ç—å?"
    ]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for i, message in enumerate(test_messages, 1):
        print(f"\nüì® –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å {i}/{len(test_messages)}:")
        print(f"üí¨ '{message}'")

        results = await system.process_user_request(message, f"test_user_{i}")
        system.print_processing_summary(results)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        if i < len(test_messages):
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüéÆ –ü–ï–†–ï–•–û–î –í –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("–í–≤–æ–¥–∏—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")

    while True:
        try:
            user_input = input("\nüí¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ").strip()

            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            if not user_input:
                print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                continue

            results = await system.process_user_request(user_input, "interactive_user")
            system.print_processing_summary(results)

        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
